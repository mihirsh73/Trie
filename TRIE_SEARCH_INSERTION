/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */
struct Node{                                                                  
    Node* links[26];
    bool flag= false;
    bool iscontain(char x)
    {
        return (links[x-'a']!=NULL);
    }
    void put(char x, Node* node)
    {
        links[x-'a']=node;
    }
    Node* get(char x)
    {
        return links[x-'a'];
    }
    void setEnd()
    {
        flag=true;
    }
    bool getEnd()
    {
        return flag;
    }
};

class Trie {

public:

    Node* root;
    Trie() {
   root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++)
        {
            if(!node->iscontain(word[i]))
            {
                node->put(word[i], new Node);
                
            }
            node = node->get(word[i]);
        }
        node->setEnd();

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* node= root;
        for(int i=0; i<word.size(); i++)
        {
            if(node->iscontain(word[i]))
            {
                node= node->get(word[i]);
            }
            else{
                return false;
            }
        }
        return node->getEnd();

    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* node= root;
        for(int i=0; i<prefix.size(); i++)
        {
            if(node->iscontain(prefix[i]))
            {
                node= node->get(prefix[i]);
            }
            else{
                return false;
            }
        }
        return true;

    }
};
// Time Complexity
O(N*W) (insert - O(W), search - O(W), startsWith - O(W))
O(N*W) where N is the number of words inserted and W is the average length of words.

As we are making nodes of each character of a node so at max we can have all unique sequence of the words. So overall space can be at max 26*N*W, so Overall Space Complexity is O(N*W)
